{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 The Spyder project consists of 9 .py files:\
\
4 Class files:\
\
Balls.py: contains the Ball class\
\
simulation.py: contains the final Simulation class\
\
simulation_singleball: contains the Simulation class prior to adapting it to handle more than one ball (this was kept so that the associated testing script still runs)\
\
testsimulation.py: a testing version of the final Simulation class which helped me identify why my original O(n) complexity next_collision method wasn\'92t colliding the balls (I realised there was a problem in my time_to_collision, in the ball class which I fixed)\
\
[N.B I still had to abandon the O(n) algorithm due to time constraints and logical errors arising out of the use of dictionaries to pair pairs of balls with their time to collision]\
\
4 Testing files:\
\
balls_test.py: tests methods in the Ball class\
\
simulation_test_manyballs.py: tests methods in the final Simulation class\
\
simulation_test_singleball.py: tests methods in the Simulation class that was only adapted to handle one ball\
\
testsimulation_test.py: tests methods in the testing version of the final Simulation class\
\
1 Investigation file:\
\
physics_investigations.py: contains functions to produce the plots for task 11.3 onwards\
\
Any extra information required to use the code is included in the form of comments and every function/method also has a docstring. All files should be immediately executable though (edge cases that crash the code have been commented out).}